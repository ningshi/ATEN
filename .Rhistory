library("devtools")
use_package("BoolNet")
document()
build()
library(ATEN)
remove.packages("BoolNet")
remove.packages("ATEN")
library(devtools)
install_github("ningshi/ATEN")
library("BoolNet")
# k is the maximum number of genes
k<-5
#call generateRandomNKNetwork to generate a Boolean network, for more deatils about arguments, see BoolNet
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
# see net1
library(BoolNet)
ngenes<-10
# k is the maximum number of genes
k<-5
#call generateRandomNKNetwork to generate a Boolean network, for more deatils about arguments, see BoolNet
net1<-generateRandomNKNetwork(ngenes, k, topology="scale_free",simplify=TRUE,readableFunctions=TRUE)
# see net1
datalist<-buildTimeSeries(network=net1,numSeries=2,numPoints=4,noiseLevel=0)
library(ATEN)
buildTimeSeries
datalist<-buildTimeSeries(network=net1,numSeries=2,numPoints=4,noiseLevel=0)
target<-3
# Generate the bootstrap samples and oob samples according to the time-series data
datasamples<-bootstrap(datalist)
# respinbag and respoutbag save the expression values of the target node
datasamples$respinbag<-matrix(datasamples$respinbag[,target])
datasamples$respoutbag<-matrix(datasamples$respoutbag[,target])
parameters<-c(startT=2,endT=-1,maxIter=50,maxK=8,rate=0.2,nodes=ngenes)
PIs<-findPIs(B=10,datalist,datasamples,parameters)
net1
library(devtools)
document()
document()
document()
library(ATEN)
?selection
library("ATEN")
?findPIs
?saalg
library("LogicReg")
?logreg.anneal.control
?parallel
library(parallel)
??parApply
